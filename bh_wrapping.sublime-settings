{
    "wrapping": [
        {
            "enabled": true, "language_list": [], "language_filter": "whitelist", "entries": [
                {"name": "<> Angle", "brackets": ["<", ">${BH_SEL}"]}
            ]
        },
        {
            "enabled": true, "language_list": ["Plain text"], "language_filter": "blacklist", "entries": [
                {"name": "{} Curly", "brackets": ["{", "}${BH_SEL}"], "insert_style": ["inline", "block", "indent_block"]}
            ]
        },
        {
            "enabled": true, "language_list": ["Plain text"], "language_filter": "blacklist", "entries": [
                {"name": "() Round", "brackets": ["(", ")${BH_SEL}"], "insert_style": ["inline", "block", "indent_block"]}
            ]
        },
        {
            "enabled": true, "language_list": ["Plain text"], "language_filter": "blacklist", "entries": [
                {"name": "[] Square", "brackets": ["[", "]${BH_SEL}"], "insert_style": ["inline", "block", "indent_block"]}
            ]
        },
        {
            "enabled": true, "language_list": ["Plain text"], "language_filter": "blacklist", "entries": [
                {"name": "'' Single Quotes", "brackets": ["'", "'${BH_SEL}"], "insert_style": ["inline"]},
                {"name": "\"\" Double Quotes", "brackets": ["\"", "\"${BH_SEL}"], "insert_style": ["inline"]}
            ]
        },
        {
            "enabled": true, "language_list": ["Python", "PythonImproved"], "language_filter": "whitelist", "entries": [
                {"name": "'''''' Triple Single Quotes", "brackets": ["'''", "'''${BH_SEL}"], "insert_style": ["inline", "block"]},
                {"name": "\"\"\"\"\"\" Triple Double Quotes", "brackets": ["\"\"\"", "\"\"\"${BH_SEL}"], "insert_style": ["inline", "block"]}
            ]
        },
        {
            "enabled": true, "language_list": ["HTML", "HTML 5", "XML", "PHP", "HTML+CFML", "ColdFusion", "ColdFusionCFC"], "language_filter": "whitelist", "entries": [
                {"name": "HTML/XML Tag", "brackets": ["<${BH_SEL:NAME}>", "</${BH_SEL:NAME}>"], "insert_style": ["inline", "block", "indent_block"]}
            ]
        },
        {
            "enabled": true, "language_list": ["Markdown", "Multimarkdown", "GithubFlavoredMarkdown", "Markdown Extended"], "language_filter": "whitelist", "entries": [
                {"name": "Mardown: Bold", "brackets": ["**", "**${BH_SEL}"]},
                {"name": "Mardown: Italic", "brackets": ["_", "_${BH_SEL}"]},
                {"name": "Mardown: Monospace", "brackets": ["`", "`${BH_SEL}"]}
            ]
        },
        {
            "enabled": true, "language_list": ["LaTeX", "LaTeX (TikZ)", "knitr (Rnw)"], "language_filter": "whitelist", "entries": [
                {"name": "LaTeX Environment", "brackets": ["\\begin{${BH_SEL:NAME}}", "\\end{${BH_SEL:NAME}}"], "insert_style": ["block"]}
            ]
        },
        {
            "enabled": true, "language_list": ["C++", "C", "C Improved"], "language_filter": "whitelist", "entries": [
                {"name": "C/C++: #if", "brackets": ["#if ${BH_SEL:/* CONDITION */}", "#endif"], "insert_style": ["block"]},
                {"name": "C/C++: #if, #else", "brackets": ["#if ${BH_SEL:/* CONDITION */}", "#else\n${BH_TAB:/* CODE */}\n#endif"], "insert_style": ["block"]},
                {"name": "C/C++: #if, #elif", "brackets": ["#if ${BH_SEL:/* CONDITION */}", "#elif ${BH_TAB:/* CONDITION */}\n${BH_TAB:/* CODE */}\n#endif"], "insert_style": ["block"]},
                {"name": "C/C++: #ifdef", "brackets": ["#ifdef ${BH_SEL:/* DEFINE */}", "#endif"], "insert_style": ["block"]},
                {"name": "C/C++: #ifdef, #else", "brackets": ["#ifdef ${BH_SEL:/* DEFINE */}", "#else\n${BH_TAB:/* CODE */}\n#endif"], "insert_style": ["block"]},
                {"name": "C/C++: #ifndef", "brackets": ["#ifndef ${BH_SEL:/* DEFINE */}", "#endif"], "insert_style": ["block"]},
                {"name": "C/C++: #ifndef, #else", "brackets": ["#ifndef ${BH_SEL:/* DEFINE */}", "#else\n${BH_TAB:/* CODE */}\n#endif"], "insert_style": ["block"]}
            ]
        },
        {
            "enabled": true, "language_list": ["Ruby"], "language_filter": "whitelist", "entries": [
                {"name": "Ruby: if", "brackets": ["if ${BH_SEL:CONDITION}", "end"], "insert_style": ["indent_block"]},
                {"name": "Ruby: until", "brackets": ["until ${BH_SEL:CONDITION}", "end"], "insert_style": ["indent_block"]},
                {"name": "Ruby: while", "brackets": ["while ${BH_SEL:CONDITION}", "end"], "insert_style": ["indent_block"]},
                {"name": "Ruby: do", "brackets": ["do ${BH_SEL:CONDITION}", "end"], "insert_style": ["indent_block"]},
                {"name": "Ruby: def", "brackets": ["def ${BH_SEL:NAME}", "end"], "insert_style": ["indent_block"]}
            ]
        },
        {
            "enabled": true, "language_list": ["CSS"], "language_filter": "whitelist", "entries": [
                {"name": "CSS: @group", "brackets": ["/* @group ${BH_SEL:NAME} */", "/* @end */"], "insert_style": ["block"]}
            ]
        }
    ]
}
